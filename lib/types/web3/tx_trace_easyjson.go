// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package web3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3942445eDecodeGithubComHanchonViviLibTypesWeb3(in *jlexer.Lexer, out *TraceTransactionResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3942445eEncodeGithubComHanchonViviLibTypesWeb3(out *jwriter.Writer, in TraceTransactionResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Jsonrpc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceTransactionResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3942445eEncodeGithubComHanchonViviLibTypesWeb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceTransactionResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3942445eEncodeGithubComHanchonViviLibTypesWeb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceTransactionResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3942445eDecodeGithubComHanchonViviLibTypesWeb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceTransactionResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3942445eDecodeGithubComHanchonViviLibTypesWeb3(l, v)
}
func easyjson3942445eDecodeGithubComHanchonViviLibTypesWeb31(in *jlexer.Lexer, out *Calls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "gas":
			out.Gas = string(in.String())
		case "gasUsed":
			out.GasUsed = string(in.String())
		case "input":
			out.Input = string(in.String())
		case "output":
			out.Output = string(in.String())
		case "to":
			out.To = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "error":
			out.Error = string(in.String())
		case "calls":
			if in.IsNull() {
				in.Skip()
				out.Calls = nil
			} else {
				in.Delim('[')
				if out.Calls == nil {
					if !in.IsDelim(']') {
						out.Calls = make([]Calls, 0, 0)
					} else {
						out.Calls = []Calls{}
					}
				} else {
					out.Calls = (out.Calls)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Calls
					(v1).UnmarshalEasyJSON(in)
					out.Calls = append(out.Calls, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3942445eEncodeGithubComHanchonViviLibTypesWeb31(out *jwriter.Writer, in Calls) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"gas\":"
		out.RawString(prefix)
		out.String(string(in.Gas))
	}
	{
		const prefix string = ",\"gasUsed\":"
		out.RawString(prefix)
		out.String(string(in.GasUsed))
	}
	{
		const prefix string = ",\"input\":"
		out.RawString(prefix)
		out.String(string(in.Input))
	}
	{
		const prefix string = ",\"output\":"
		out.RawString(prefix)
		out.String(string(in.Output))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"calls\":"
		out.RawString(prefix)
		if in.Calls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Calls {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Calls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3942445eEncodeGithubComHanchonViviLibTypesWeb31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Calls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3942445eEncodeGithubComHanchonViviLibTypesWeb31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Calls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3942445eDecodeGithubComHanchonViviLibTypesWeb31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Calls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3942445eDecodeGithubComHanchonViviLibTypesWeb31(l, v)
}
