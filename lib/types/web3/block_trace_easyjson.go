// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package web3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb3(in *jlexer.Lexer, out *Tx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "gas":
			out.GasUsed = string(in.String())
		case "returnValue":
			out.ReturnValue = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb3(out *jwriter.Writer, in Tx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"gas\":"
		out.RawString(prefix)
		out.String(string(in.GasUsed))
	}
	{
		const prefix string = ",\"returnValue\":"
		out.RawString(prefix)
		out.String(string(in.ReturnValue))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb3(l, v)
}
func easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb31(in *jlexer.Lexer, out *TraceBlockValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "failed":
			out.Failed = bool(in.Bool())
		case "gas":
			out.Gas = int64(in.Int64())
		case "returnValue":
			out.ReturnValue = string(in.String())
		case "structLogs":
			if in.IsNull() {
				in.Skip()
				out.StructLogs = nil
			} else {
				in.Delim('[')
				if out.StructLogs == nil {
					if !in.IsDelim(']') {
						out.StructLogs = make([]Logs, 0, 0)
					} else {
						out.StructLogs = []Logs{}
					}
				} else {
					out.StructLogs = (out.StructLogs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Logs
					(v1).UnmarshalEasyJSON(in)
					out.StructLogs = append(out.StructLogs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb31(out *jwriter.Writer, in TraceBlockValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"failed\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Failed))
	}
	{
		const prefix string = ",\"gas\":"
		out.RawString(prefix)
		out.Int64(int64(in.Gas))
	}
	{
		const prefix string = ",\"returnValue\":"
		out.RawString(prefix)
		out.String(string(in.ReturnValue))
	}
	{
		const prefix string = ",\"structLogs\":"
		out.RawString(prefix)
		if in.StructLogs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.StructLogs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceBlockValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceBlockValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceBlockValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceBlockValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb31(l, v)
}
func easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb32(in *jlexer.Lexer, out *TraceBlockResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb32(out *jwriter.Writer, in TraceBlockResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		(in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TraceBlockResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TraceBlockResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TraceBlockResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TraceBlockResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb32(l, v)
}
func easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb33(in *jlexer.Lexer, out *ResultTraceBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "jsonrpc":
			out.Jsonrpc = string(in.String())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]TraceBlockResult, 0, 1)
					} else {
						out.Result = []TraceBlockResult{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TraceBlockResult
					(v4).UnmarshalEasyJSON(in)
					out.Result = append(out.Result, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb33(out *jwriter.Writer, in ResultTraceBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"jsonrpc\":"
		out.RawString(prefix)
		out.String(string(in.Jsonrpc))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Result {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResultTraceBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResultTraceBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResultTraceBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResultTraceBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb33(l, v)
}
func easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb34(in *jlexer.Lexer, out *Logs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "depth":
			out.Depth = int64(in.Int64())
		case "gas":
			out.Gas = int64(in.Int64())
		case "gasCost":
			out.GasCost = int64(in.Int64())
		case "op":
			out.Op = string(in.String())
		case "pc":
			out.Pc = int64(in.Int64())
		case "stack":
			if in.IsNull() {
				in.Skip()
				out.Stack = nil
			} else {
				in.Delim('[')
				if out.Stack == nil {
					if !in.IsDelim(']') {
						out.Stack = make([]string, 0, 4)
					} else {
						out.Stack = []string{}
					}
				} else {
					out.Stack = (out.Stack)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Stack = append(out.Stack, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb34(out *jwriter.Writer, in Logs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"depth\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Depth))
	}
	{
		const prefix string = ",\"gas\":"
		out.RawString(prefix)
		out.Int64(int64(in.Gas))
	}
	{
		const prefix string = ",\"gasCost\":"
		out.RawString(prefix)
		out.Int64(int64(in.GasCost))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"pc\":"
		out.RawString(prefix)
		out.Int64(int64(in.Pc))
	}
	{
		const prefix string = ",\"stack\":"
		out.RawString(prefix)
		if in.Stack == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Stack {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Logs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Logs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18e0ad77EncodeGithubComHanchonHanchondLibTypesWeb34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Logs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Logs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18e0ad77DecodeGithubComHanchonHanchondLibTypesWeb34(l, v)
}
