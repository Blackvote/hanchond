// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package web3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6467d33bDecodeGithubComHanchonHanchondLibTypesWeb3(in *jlexer.Lexer, out *TxRestResponseForEvents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tx_response":
			easyjson6467d33bDecode(in, &out.TxResponse)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncodeGithubComHanchonHanchondLibTypesWeb3(out *jwriter.Writer, in TxRestResponseForEvents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tx_response\":"
		out.RawString(prefix[1:])
		easyjson6467d33bEncode(out, in.TxResponse)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxRestResponseForEvents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6467d33bEncodeGithubComHanchonHanchondLibTypesWeb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxRestResponseForEvents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6467d33bEncodeGithubComHanchonHanchondLibTypesWeb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxRestResponseForEvents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6467d33bDecodeGithubComHanchonHanchondLibTypesWeb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxRestResponseForEvents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6467d33bDecodeGithubComHanchonHanchondLibTypesWeb3(l, v)
}
func easyjson6467d33bDecode(in *jlexer.Lexer, out *struct {
	Height string `json:"height"`
	Txhash string `json:"txhash"`
	Code   int    `json:"code"`
	Logs   []struct {
		MsgIndex int    `json:"msg_index"`
		Log      string `json:"log"`
		Events   []struct {
			Type       string `json:"type"`
			Attributes []struct {
				Key   string `json:"key"`
				Value string `json:"value"`
			} `json:"attributes"`
		} `json:"events"`
	} `json:"logs"`
	GasWanted string `json:"gas_wanted"`
	GasUsed   string `json:"gas_used"`
	Events    []struct {
		Type       string `json:"type"`
		Attributes []struct {
			Key   string `json:"key"`
			Value string `json:"value"`
			Index bool   `json:"index"`
		} `json:"attributes"`
	} `json:"events"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = string(in.String())
		case "txhash":
			out.Txhash = string(in.String())
		case "code":
			out.Code = int(in.Int())
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]struct {
							MsgIndex int    `json:"msg_index"`
							Log      string `json:"log"`
							Events   []struct {
								Type       string `json:"type"`
								Attributes []struct {
									Key   string `json:"key"`
									Value string `json:"value"`
								} `json:"attributes"`
							} `json:"events"`
						}, 0, 1)
					} else {
						out.Logs = []struct {
							MsgIndex int    `json:"msg_index"`
							Log      string `json:"log"`
							Events   []struct {
								Type       string `json:"type"`
								Attributes []struct {
									Key   string `json:"key"`
									Value string `json:"value"`
								} `json:"attributes"`
							} `json:"events"`
						}{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						MsgIndex int    `json:"msg_index"`
						Log      string `json:"log"`
						Events   []struct {
							Type       string `json:"type"`
							Attributes []struct {
								Key   string `json:"key"`
								Value string `json:"value"`
							} `json:"attributes"`
						} `json:"events"`
					}
					easyjson6467d33bDecode1(in, &v1)
					out.Logs = append(out.Logs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gas_wanted":
			out.GasWanted = string(in.String())
		case "gas_used":
			out.GasUsed = string(in.String())
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]struct {
							Type       string `json:"type"`
							Attributes []struct {
								Key   string `json:"key"`
								Value string `json:"value"`
								Index bool   `json:"index"`
							} `json:"attributes"`
						}, 0, 1)
					} else {
						out.Events = []struct {
							Type       string `json:"type"`
							Attributes []struct {
								Key   string `json:"key"`
								Value string `json:"value"`
								Index bool   `json:"index"`
							} `json:"attributes"`
						}{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v2 struct {
						Type       string `json:"type"`
						Attributes []struct {
							Key   string `json:"key"`
							Value string `json:"value"`
							Index bool   `json:"index"`
						} `json:"attributes"`
					}
					easyjson6467d33bDecode2(in, &v2)
					out.Events = append(out.Events, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncode(out *jwriter.Writer, in struct {
	Height string `json:"height"`
	Txhash string `json:"txhash"`
	Code   int    `json:"code"`
	Logs   []struct {
		MsgIndex int    `json:"msg_index"`
		Log      string `json:"log"`
		Events   []struct {
			Type       string `json:"type"`
			Attributes []struct {
				Key   string `json:"key"`
				Value string `json:"value"`
			} `json:"attributes"`
		} `json:"events"`
	} `json:"logs"`
	GasWanted string `json:"gas_wanted"`
	GasUsed   string `json:"gas_used"`
	Events    []struct {
		Type       string `json:"type"`
		Attributes []struct {
			Key   string `json:"key"`
			Value string `json:"value"`
			Index bool   `json:"index"`
		} `json:"attributes"`
	} `json:"events"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.String(string(in.Height))
	}
	{
		const prefix string = ",\"txhash\":"
		out.RawString(prefix)
		out.String(string(in.Txhash))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Logs {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson6467d33bEncode1(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"gas_wanted\":"
		out.RawString(prefix)
		out.String(string(in.GasWanted))
	}
	{
		const prefix string = ",\"gas_used\":"
		out.RawString(prefix)
		out.String(string(in.GasUsed))
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Events {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson6467d33bEncode2(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6467d33bDecode2(in *jlexer.Lexer, out *struct {
	Type       string `json:"type"`
	Attributes []struct {
		Key   string `json:"key"`
		Value string `json:"value"`
		Index bool   `json:"index"`
	} `json:"attributes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]struct {
							Key   string `json:"key"`
							Value string `json:"value"`
							Index bool   `json:"index"`
						}, 0, 1)
					} else {
						out.Attributes = []struct {
							Key   string `json:"key"`
							Value string `json:"value"`
							Index bool   `json:"index"`
						}{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						Key   string `json:"key"`
						Value string `json:"value"`
						Index bool   `json:"index"`
					}
					easyjson6467d33bDecode3(in, &v7)
					out.Attributes = append(out.Attributes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncode2(out *jwriter.Writer, in struct {
	Type       string `json:"type"`
	Attributes []struct {
		Key   string `json:"key"`
		Value string `json:"value"`
		Index bool   `json:"index"`
	} `json:"attributes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attributes {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson6467d33bEncode3(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6467d33bDecode3(in *jlexer.Lexer, out *struct {
	Key   string `json:"key"`
	Value string `json:"value"`
	Index bool   `json:"index"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "index":
			out.Index = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncode3(out *jwriter.Writer, in struct {
	Key   string `json:"key"`
	Value string `json:"value"`
	Index bool   `json:"index"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Bool(bool(in.Index))
	}
	out.RawByte('}')
}
func easyjson6467d33bDecode1(in *jlexer.Lexer, out *struct {
	MsgIndex int    `json:"msg_index"`
	Log      string `json:"log"`
	Events   []struct {
		Type       string `json:"type"`
		Attributes []struct {
			Key   string `json:"key"`
			Value string `json:"value"`
		} `json:"attributes"`
	} `json:"events"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msg_index":
			out.MsgIndex = int(in.Int())
		case "log":
			out.Log = string(in.String())
		case "events":
			if in.IsNull() {
				in.Skip()
				out.Events = nil
			} else {
				in.Delim('[')
				if out.Events == nil {
					if !in.IsDelim(']') {
						out.Events = make([]struct {
							Type       string `json:"type"`
							Attributes []struct {
								Key   string `json:"key"`
								Value string `json:"value"`
							} `json:"attributes"`
						}, 0, 1)
					} else {
						out.Events = []struct {
							Type       string `json:"type"`
							Attributes []struct {
								Key   string `json:"key"`
								Value string `json:"value"`
							} `json:"attributes"`
						}{}
					}
				} else {
					out.Events = (out.Events)[:0]
				}
				for !in.IsDelim(']') {
					var v10 struct {
						Type       string `json:"type"`
						Attributes []struct {
							Key   string `json:"key"`
							Value string `json:"value"`
						} `json:"attributes"`
					}
					easyjson6467d33bDecode4(in, &v10)
					out.Events = append(out.Events, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncode1(out *jwriter.Writer, in struct {
	MsgIndex int    `json:"msg_index"`
	Log      string `json:"log"`
	Events   []struct {
		Type       string `json:"type"`
		Attributes []struct {
			Key   string `json:"key"`
			Value string `json:"value"`
		} `json:"attributes"`
	} `json:"events"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msg_index\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MsgIndex))
	}
	{
		const prefix string = ",\"log\":"
		out.RawString(prefix)
		out.String(string(in.Log))
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Events {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson6467d33bEncode4(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6467d33bDecode4(in *jlexer.Lexer, out *struct {
	Type       string `json:"type"`
	Attributes []struct {
		Key   string `json:"key"`
		Value string `json:"value"`
	} `json:"attributes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]struct {
							Key   string `json:"key"`
							Value string `json:"value"`
						}, 0, 2)
					} else {
						out.Attributes = []struct {
							Key   string `json:"key"`
							Value string `json:"value"`
						}{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						Key   string `json:"key"`
						Value string `json:"value"`
					}
					easyjson6467d33bDecode5(in, &v13)
					out.Attributes = append(out.Attributes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncode4(out *jwriter.Writer, in struct {
	Type       string `json:"type"`
	Attributes []struct {
		Key   string `json:"key"`
		Value string `json:"value"`
	} `json:"attributes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Attributes {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson6467d33bEncode5(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6467d33bDecode5(in *jlexer.Lexer, out *struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6467d33bEncode5(out *jwriter.Writer, in struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
