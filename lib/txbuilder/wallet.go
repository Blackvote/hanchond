package txbuilder

import (
	"fmt"

	"github.com/ethereum/go-ethereum/accounts"
	hdwallet "github.com/miguelmota/go-ethereum-hdwallet"
)

// WalletFromMnemonicWithPath requires the complete mnemonic path to generate the wallet
func WalletFromMnemonicWithPath(mnemonic string, mnemonicPath string) (*hdwallet.Wallet, accounts.Account, error) {
	wallet, err := hdwallet.NewFromMnemonic(mnemonic)
	if err != nil {
		return nil, accounts.Account{}, err
	}

	path := hdwallet.MustParseDerivationPath(mnemonicPath)
	account, err := wallet.Derive(path, false)
	if err != nil {
		return nil, accounts.Account{}, err
	}
	return wallet, account, nil
}

// WalletFromMnemonicWithAccountID returns the wallet with id=accountID, always using the main path of derivation
func WalletFromMnemonicWithAccountID(mnemonic string, accountID int) (*hdwallet.Wallet, accounts.Account, error) {
	return WalletFromMnemonicWithPath(mnemonic, fmt.Sprintf("m/44'/60'/0'/0/%d", accountID))
}

// WalletFromMnemonic returns the first wallet generated by the mnemonic
func WalletFromMnemonic(mnemonic string) (*hdwallet.Wallet, accounts.Account, error) {
	return WalletFromMnemonicWithPath(mnemonic, "m/44'/60'/0'/0/0")
}
